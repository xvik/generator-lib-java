plugins {
    id 'ru.vyarus.java-lib' version '2.1.0' apply false
    id 'ru.vyarus.github-info' version '1.2.0' apply false<% if (enableQualityChecks) { %>
    id 'ru.vyarus.quality' version '4.6.0' apply false<% } %>

    id 'base'
    id 'jacoco'
    id 'java-platform'
    id 'ru.vyarus.pom' version '2.2.0-SNAPSHOT'
    id 'net.researchgate.release' version '2.8.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.39.0'
}

wrapper {
    gradleVersion = '6.9'
}

description = '<%= libDesc %>'

javaPlatform {
    allowDependencies()
}

ext {
    slf4j = '1.7.30'
}

// root project is a BOM (like maven)
dependencies {
    // inherited BOMs declaration
    //api platform('group:artifact:version')
    constraints {
        api 'org.spockframework:spock-core:2.0-groovy-3.0'
        api "org.slf4j:slf4j-api:$slf4j"
        // add subprojects to BOM
        project.subprojects.each {
            api it
        }
    }
}

pom {
    name '<%= modulePrefix %>-bom'
    description '<%= libDesc %> BOM'
}

publishing {
    publications {
        bom(MavenPublication) {
            // custom name required, otherwise it would be project name
            artifactId = '<%= modulePrefix %>-bom'
            from components.javaPlatform
        }
    }
}

// in subrojects task would be created by java-lib plugin
task install(dependsOn: 'publishToMavenLocal')

// maven pom related configuration applied to all projects (including BOM)
allprojects {
    apply plugin: 'project-report'
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'signing'

    repositories { mavenLocal(); mavenCentral() }

    group = '<%= libGroup %>'

    github {
        user = '<%= githubUser %>'
        repository = rootProject.name
        license = 'MIT'
        licenseUrl = github.rawFileUrl('LICENSE');
        changelogFile = 'CHANGELOG.md'
        vcsUrl = 'https://github.com/xvik/<%= libName %>'
    }

    pom {
        developers {
            developer {
                id '<%= githubUser %>'
                name '<%= authorName %>'
                email '<%= authorEmail %>'
            }
        }
    }

    signing {
        // https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials
        sign publishing.publications
    }

    tasks.withType(Sign).configureEach {
        onlyIf { !version.endsWith("SNAPSHOT") }
    }

    // disable gradle metadata publishing (because it confuse a lot)
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}

// all sub-modules are normal java modules, using root BOM (like maven)
subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'ru.vyarus.quality'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = 1.8

    // common dependencies for all modules
    dependencies {
        implementation platform(project(':'))

        compileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.3'

        implementation 'org.slf4j:slf4j-api'

        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation "org.slf4j:jul-to-slf4j:${rootProject.slf4j}"
        testImplementation 'org.spockframework:spock-core'
    }

    // use only direct dependencies in the generated pom, removing BOM
    pomGeneration {
        removeDependencyManagement()
    }

    // java 11 auto module name
    jar {
        manifest {
            attributes 'Automatic-Module-Name': "$rootProject.group.${project.name.replace('<%= modulePrefix %>-', rootProject.name)}"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'skipped', 'failed'
            exceptionFormat 'full'
        }
        maxHeapSize = '512m'
    }

    dependencyUpdates.revision = 'release'
    jacocoTestReport.reports.xml.enabled = true


    task showDependenciesTree(dependsOn: 'htmlDependencyReport', group: 'help', description:
            'Generates dependencies tree report and opens it in browser') {
        doLast {
            java.awt.Desktop.getDesktop().open(file("build/reports/project/dependencies/root.${project.name}.html"))
        }
    }
}

// dependency on all subprojects required for release validation
check.dependsOn subprojects.check

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('sonatypeUser')
            password = findProperty('sonatypePassword')
        }
    }
}

// release manages only root project (subprojects will be checked and released implicitly)
afterReleaseBuild {
    dependsOn = ['publishToSonatype',
                 'closeAndReleaseSonatypeStagingRepository']
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

task testReport(type: TestReport, description: 'Generates an aggregate test report') {
    destinationDir = file("${buildDir}/reports/tests")
    reportOn subprojects.test
}

task jacocoMerge(type: JacocoMerge, description: 'Merge coverage results for aggregated report generation') {
    executionData = files(subprojects.collect { it.file('build/jacoco/test.exec') })
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoTestReport(type: JacocoReport, description: 'Generates aggregated coverage report') {
    dependsOn jacocoMerge
    executionData jacocoMerge.destinationFile
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))
    reports.xml.enabled = true
}

htmlDependencyReport.projects = allprojects
