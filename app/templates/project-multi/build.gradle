plugins {
    id 'ru.vyarus.java-lib' version '2.1.0' apply false
    id 'ru.vyarus.github-info' version '1.2.0' apply false<% if (enableQualityChecks) { %>
    id 'ru.vyarus.quality' version '4.6.0' apply false<% } %>
    id "io.spring.dependency-management" version '1.0.11.RELEASE' apply false

    id 'base'
    id 'jacoco'
    id 'net.researchgate.release' version '2.8.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.38.0'
}

wrapper {
    gradleVersion = '6.9'
}

description = '<%= libDesc %>'

allprojects {
    apply plugin: 'project-report'

    repositories { mavenCentral(); mavenLocal() }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'ru.vyarus.quality'
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8

    ext {
        groovy = '2.5.14'
        slf4j = '1.7.30'
    }

    dependencyManagement {
        // Use for BOM declaration
//      imports {
//          mavenBom "group:artifact:version"
//      }
        dependencies {
            dependency 'org.spockframework:spock-core:1.3-groovy-2.5'
            // groovy bundled with spock (2.5.2) does not work well with java 11
            dependency "org.codehaus.groovy:groovy:$groovy"
            dependency "org.codehaus.groovy:groovy-json:$groovy"
            dependency "org.codehaus.groovy:groovy-macro:$groovy"
            dependency "org.codehaus.groovy:groovy-nio:$groovy"
            dependency "org.codehaus.groovy:groovy-sql:$groovy"
            dependency "org.codehaus.groovy:groovy-templates:$groovy"
            dependency "org.codehaus.groovy:groovy-test:$groovy"
            dependency "org.codehaus.groovy:groovy-xml:$groovy"

            dependency "org.slf4j:slf4j-api:$slf4j"

            // put all modules dependencies here in order to use BOM for version management
        }
    }
    // common dependencies for all modules
    dependencies {
        compileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.3'

        implementation 'org.slf4j:slf4j-api'

        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation "org.slf4j:jul-to-slf4j:$slf4j"
        testImplementation 'org.spockframework:spock-core'
    }

    group = '<%= libGroup %>'

    github {
        user = '<%= githubUser %>'
        repository = rootProject.name
        license = 'MIT'
        licenseUrl = github.rawFileUrl('LICENSE');
        changelogFile = 'CHANGELOG.md'
        vcsUrl = 'https://github.com/xvik/<%= libName %>'
    }

    pom {
        developers {
            developer {
                id '<%= githubUser %>'
                name '<%= authorName %>'
                email '<%= authorEmail %>'
            }
        }
    }

    // java 11 auto module name
    jar {
        manifest {
            attributes 'Automatic-Module-Name': "$rootProject.group.${project.name.replace('<%= modulePrefix %>-', rootProject.name)}"
        }
    }

    signing {
        // https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials
        sign publishing.publications.maven
    }

    tasks.withType(Sign).configureEach {
        onlyIf { !version.endsWith("SNAPSHOT") }
    }

    // disable gradle metadata publishing (because it confuse a lot)
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    test {
        testLogging {
            events 'skipped', 'failed'
            exceptionFormat 'full'
        }
        maxHeapSize = '512m'
    }

    dependencyUpdates.revision = 'release'
    jacocoTestReport.reports.xml.enabled = true


    task showDependenciesTree(dependsOn: 'htmlDependencyReport', group: 'help', description:
            'Generates dependencies tree report and opens it in browser') {
        doLast {
            java.awt.Desktop.getDesktop().open(file("build/reports/project/dependencies/root.${project.name}.html"))
        }
    }
}

// dependency on all subprojects required for release validation
check.dependsOn subprojects.check

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('sonatypeUser')
            password = findProperty('sonatypePassword')
        }
    }
}

// release manages only root project (subprojects will be checked and released implicitly)
afterReleaseBuild {
    dependsOn = ['publishToSonatype',
                 'closeAndReleaseSonatypeStagingRepository']
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

task testReport(type: TestReport, description: 'Generates an aggregate test report') {
    destinationDir = file("${buildDir}/reports/tests")
    reportOn subprojects.test
}

task jacocoMerge(type: JacocoMerge, description: 'Merge coverage results for aggregated report generation') {
    executionData = files(subprojects.collect {it.file('build/jacoco/test.exec')})
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoTestReport(type: JacocoReport, description: 'Generates aggregated coverage report') {
    dependsOn jacocoMerge
    executionData jacocoMerge.destinationFile
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))
    reports.xml.enabled = true
}

htmlDependencyReport.projects = allprojects
