plugins {
    id 'ru.vyarus.github-info' version '1.4.0' apply false<% if (enableQualityChecks) { %>
    id 'ru.vyarus.quality' version '4.8.0' apply false<% } %>

    id 'jacoco'
    id 'java-platform'
    id 'ru.vyarus.java-lib' version '2.3.1'
    id 'net.researchgate.release' version '3.0.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.44.0'
}

wrapper {
    gradleVersion = '6.9'
}

description = '<%= libDesc %>'

ext {
    slf4j = '1.7.30'
}

// root project is a BOM (like maven)
dependencies {
    // inherited BOMs declaration
    //api platform('group:artifact:version')
    constraints {
        api 'org.spockframework:spock-core:2.0-groovy-3.0'
        api "org.slf4j:slf4j-api:$slf4j"
        // add subprojects to BOM
        project.subprojects.each { api it }
    }
}

javaLib {
    // aggregated test and coverage reports
    aggregateReports()
    // publish root BOM as custom artifact
    bom {
        artifactId = '<%= modulePrefix %>-bom'
        description = '<%= libDesc %> BOM'
    }
    // bom publication could be disabled (to use it only for dependency management in submodules)
    // in this case bom section above could be removed; afterReleaseBuild must also be updated
    //withoutPublication()
}

// maven publication related configuration applied to all projects
allprojects {
    apply plugin: 'project-report'
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'signing'

    repositories { mavenLocal(); mavenCentral() }

    group = '<%= libGroup %>'

    github {
        user = '<%= githubUser %>'
        license = 'MIT'
    }

    // delay required because java plugin is activated only in subprojects and without it
    // pom closure would reference root project only
    afterEvaluate {
        pom {
            developers {
                developer {
                    id '<%= githubUser %>'
                    name '<%= authorName %>'
                    email '<%= authorEmail %>'
                }
            }
        }
    }

    // don't publish gradle metadata artifact
    javaLib.withoutGradleMetadata()

    // skip signing for jitpack (snapshots)
    tasks.withType(Sign) {onlyIf { !System.getenv('JITPACK') }}
}

// all sub-modules are normal java modules, using root BOM (like maven)
subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'ru.vyarus.quality'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = 1.8

    // common dependencies for all modules
    dependencies {
        implementation platform(project(':'))

        compileOnly 'com.github.spotbugs:spotbugs-annotations:4.4.2'

        implementation 'org.slf4j:slf4j-api'

        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation "org.slf4j:jul-to-slf4j:${rootProject.slf4j}"
        testImplementation 'org.spockframework:spock-core'
    }

    javaLib {
        // java 9 auto module name
        autoModuleName = "$rootProject.group.${project.name.replace('<%= modulePrefix %>-', rootProject.name)}"
        // use only direct dependencies in the generated pom, removing BOM mentions
        pom.removeDependencyManagement()
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'skipped', 'failed'
            exceptionFormat 'full'
        }
        maxHeapSize = '512m'
    }

    dependencyUpdates.revision = 'release'
}

// dependency on all subprojects required for release validation
check.dependsOn subprojects.check

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('sonatypeUser')
            password = findProperty('sonatypePassword')
        }
    }
}

// Required signing properties for release: signing.keyId, signing.password and signing.secretKeyRingFile
// (https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials)

//release.git.requireBranch.set('master') // default is main branch

// release manages only root project (subprojects will be checked and released implicitly)
afterReleaseBuild {
    dependsOn 'publishToSonatype'
    dependsOn subprojects.collect {":$it.name:publishToSonatype" }
    dependsOn 'closeAndReleaseSonatypeStagingRepository'
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

